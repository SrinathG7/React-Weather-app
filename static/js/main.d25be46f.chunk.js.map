{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["api","Weather","useState","query","setQuery","weather","setWeather","addZero","i","className","main","temp","type","placeholder","onChange","event","target","value","onKeyPress","key","fetch","then","res","json","result","console","log","name","sys","country","currentDate","day","getDay","date","getDate","thisMonth","getMonth","thisYear","getFullYear","h","getHours","m","getMinutes","timeLine","dateHandler","Date","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAIMA,EACA,mCADAA,EAEC,2CA0HQC,EAvHC,WAIZ,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAuDA,SAASC,EAAQC,GAIlB,OAHIA,EAAI,KACPA,EAAI,IAAMA,GAEJA,EAiBN,OACD,qBAAKC,UAAmC,oBAAhBJ,EAAQK,KAAyBL,EAAQK,KAAKC,KAAO,GAAM,YAAc,YAAe,MAAhH,SACC,iCACC,qBAAKF,UAAU,cAAf,SACC,uBACCG,KAAK,OACLC,YAAY,YACZJ,UAAU,cACVK,SAAU,SAACC,GAAD,OAAWX,EAASW,EAAMC,OAAOC,QAC3CA,MAAOd,EACPe,WApFmB,SAACD,GAEJ,UAAZA,EAAME,KAELC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFpB,EAAS,IACTE,EAAWkB,GACXC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAOd,KAAKC,cA6EX,oBAAhBN,EAAQK,KACf,gCACC,sBAAKD,UAAU,eAAf,UACC,sBAAKA,UAAU,WAAf,UACEJ,EAAQsB,KADV,KACkBtB,EAAQuB,IAAIC,WAE9B,qBAAKpB,UAAU,OAAf,SA1EgB,SAACqB,GAErB,IAeIC,EAfU,CAAC,MAAO,MAAO,MAAO,QAAS,MAAO,OAelCD,EAAYE,UAC1BC,EAAOH,EAAYI,UACnBC,EAhBS,CACT,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAImBL,EAAYM,YAC/BC,EAAWP,EAAYQ,cACvBC,EAAIhC,EAAQuB,EAAYU,YAC3BC,EAAIlC,EAAQuB,EAAYY,cAGrBC,EAAW,KAOf,OANGJ,GAAG,KAEFI,EAAW,MAIT,GAAN,OAAUJ,EAAV,cAAiBE,EAAjB,YAAsBE,EAAtB,aAAmCZ,EAAnC,YAA0CE,EAA1C,YAAkDE,EAAlD,YAA+DE,GA0CpCO,CAAY,IAAIC,WAGxC,sBAAKpC,UAAU,cAAf,UACC,sBAAKA,UAAU,OAAf,UAAuBJ,EAAQK,KAAKC,KAApC,WACA,qBAAKF,UAAU,UAAf,SAA0BJ,EAAQA,QAAQ,GAAGK,aAK/C,yBC1GSoC,MARf,WACE,OACE,qBAAKrC,UAAU,mBAAf,SACC,cAAC,EAAD,OCIUsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d25be46f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nimport \"./Weather.css\"\r\n\r\nconst api = {\r\n\tkey: \"819d18735f180fb304cba0598d846a91\",\r\n\tbase: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n\r\nconst Weather = () =>\r\n{\r\n\r\n    // const [mood, setMood] = useState(\"\");\r\n    const [query, setQuery] = useState('');\r\n    const [weather, setWeather] = useState({});\r\n    \r\n    const searchHandler = (value) =>\r\n    {\r\n        if(value.key===\"Enter\")\r\n        {\r\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setQuery('');\r\n                setWeather(result);\r\n                console.log(result);\r\n                console.log(result.main.temp)\r\n                \r\n                \r\n                \r\n        });\r\n        \r\n    }\r\n    }\r\n    \r\n    const dateHandler = (currentDate) =>\r\n    {\r\n    let weekday = [\"SUN\", \"MON\", \"Tue\", \"THURS\", \"FRI\", \"SAT\"];\r\n    let months = [\r\n        \"JAN\",\r\n        \"FEB\",\r\n        \"MAR\",\r\n        \"APR\",\r\n        \"MAY\",\r\n        \"JUN\",\r\n        \"JUL\",\r\n        \"AUG\",\r\n        \"SEP\",\r\n        \"OCT\",\r\n        \"NOV\",\r\n        \"DEC\",\r\n    ];\r\n    var day = weekday[currentDate.getDay()];\r\n    var date = currentDate.getDate();\r\n    var thisMonth = months[currentDate.getMonth()];\r\n    var thisYear = currentDate.getFullYear();\r\n    var h = addZero(currentDate.getHours());\r\n\tvar m = addZero(currentDate.getMinutes());\r\n    \r\n\r\n    var timeLine = \"AM\";\r\n    if(h>=12)\r\n    {\r\n        timeLine = \"PM\";\r\n    }\r\n    \r\n\r\n    return `${h} : ${m} ${timeLine}, ${day} ${date} ${thisMonth} ${thisYear}`;\r\n    }\r\n    function addZero(i) {\r\n\t\t\tif (i < 10) {\r\n\t\t\t\ti = \"0\" + i;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n    // const backgroundHandler = (temp) =>\r\n    // {\r\n    //     if(temp>15)\r\n    //     {\r\n    //         setMood(\"app warm\")\r\n    //     }\r\n    //     else{\r\n    //         setMood(\"app cold\")\r\n    //     }\r\n    //     return mood;\r\n    // }\r\n    \r\n\r\n\r\n\r\n    return (\r\n\t\t\t<div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm ' : 'app night') : 'app'}>\r\n\t\t\t\t<main>\r\n\t\t\t\t\t<div className=\"search-box \">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"search...\"\r\n\t\t\t\t\t\t\tclassName=\" search-bar\"\r\n\t\t\t\t\t\t\tonChange={(event) => setQuery(event.target.value)}\r\n\t\t\t\t\t\t\tvalue={query}\r\n\t\t\t\t\t\t\tonKeyPress={searchHandler}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{typeof weather.main != \"undefined\" ? (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<div className=\"location-box\">\r\n\t\t\t\t\t\t\t\t<div className=\"location\">\r\n\t\t\t\t\t\t\t\t\t{weather.name}, {weather.sys.country}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"date\">{dateHandler(new Date())}</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className=\"weather-box\">\r\n\t\t\t\t\t\t\t\t<div className=\"temp\">{weather.main.temp}Â°C</div>\r\n\t\t\t\t\t\t\t\t<div className=\"weather\">{weather.weather[0].main}</div>\r\n\t\t\t\t\t\t\t</div>\r\n                            {/* {backgroundHandler(weather.main.temp)} */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\"No results found\"\r\n\t\t\t\t\t)}\r\n\t\t\t\t</main>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n                }\r\n\r\n\r\nexport default Weather;","import './App.css';\nimport Weather from './components/Weather';\n\n\n\nfunction App() {\n  return (\n    <div className=\"app warm morning\" >\n     <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}